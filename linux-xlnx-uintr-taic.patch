diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index 9c48fecc6719..c14b3f62d082 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -154,6 +154,7 @@ config RISCV
 	select PCI_MSI if PCI
 	select RISCV_ALTERNATIVE if !XIP_KERNEL
 	select RISCV_INTC
+	select RISCV_TAIC if RISCV_UINTR
 	select RISCV_TIMER if RISCV_SBI
 	select SIFIVE_PLIC
 	select SPARSE_IRQ
@@ -899,6 +900,10 @@ config PORTABLE
 	select MMU
 	select OF
 
+config RISCV_UINTR
+	bool "User Interrupt Support"
+	default y
+
 menu "Power management options"
 
 source "kernel/power/Kconfig"
diff --git a/arch/riscv/include/asm/csr.h b/arch/riscv/include/asm/csr.h
index 777cb8299551..5f7e4d92b549 100644
--- a/arch/riscv/include/asm/csr.h
+++ b/arch/riscv/include/asm/csr.h
@@ -10,8 +10,10 @@
 #include <linux/bits.h>
 
 /* Status register flags */
+#define SR_UIE		_AC(0x00000001, UL) /* User Interrupt Enable */
 #define SR_SIE		_AC(0x00000002, UL) /* Supervisor Interrupt Enable */
 #define SR_MIE		_AC(0x00000008, UL) /* Machine Interrupt Enable */
+#define SR_UPIE		_AC(0x00000010, UL) /* Previous User IE */
 #define SR_SPIE		_AC(0x00000020, UL) /* Previous Supervisor IE */
 #define SR_MPIE		_AC(0x00000080, UL) /* Previous Machine IE */
 #define SR_SPP		_AC(0x00000100, UL) /* Previously Supervisor */
@@ -73,12 +75,15 @@
 #define CAUSE_IRQ_FLAG		(_AC(1, UL) << (__riscv_xlen - 1))
 
 /* Interrupt causes (minus the high bit) */
+#define IRQ_U_SOFT		0
 #define IRQ_S_SOFT		1
 #define IRQ_VS_SOFT		2
 #define IRQ_M_SOFT		3
+#define IRQ_U_TIMER		4
 #define IRQ_S_TIMER		5
 #define IRQ_VS_TIMER		6
 #define IRQ_M_TIMER		7
+#define IRQ_U_EXT		8
 #define IRQ_S_EXT		9
 #define IRQ_VS_EXT		10
 #define IRQ_M_EXT		11
@@ -272,6 +277,8 @@
 #define CSR_SSCOUNTOVF		0xda0
 
 #define CSR_SSTATUS		0x100
+#define CSR_SEDELEG     0x102
+#define CSR_SIDELEG     0x103
 #define CSR_SIE			0x104
 #define CSR_STVEC		0x105
 #define CSR_SCOUNTEREN		0x106
@@ -427,6 +434,18 @@
 # define CSR_TVAL	CSR_STVAL
 # define CSR_IP		CSR_SIP
 
+/* User Trap Setup */
+#define CSR_USTATUS         0x000
+#define CSR_UIE             0x004
+#define CSR_UTVEC           0x005
+
+/* User Trap Handling */
+#define CSR_USCRATCH        0x040
+#define CSR_UEPC            0x041
+#define CSR_UCAUSE          0x042
+#define CSR_UTVAL           0x043
+#define CSR_UIP             0x044
+
 # define CSR_IEH		CSR_SIEH
 # define CSR_ISELECT	CSR_SISELECT
 # define CSR_IREG	CSR_SIREG
@@ -451,6 +470,11 @@
 #define IE_TIE		(_AC(0x1, UL) << RV_IRQ_TIMER)
 #define IE_EIE		(_AC(0x1, UL) << RV_IRQ_EXT)
 
+/* IE/IP (User Interrupt Enable/Pending) flags */
+#define IE_USIE		(_AC(0x1, UL) << IRQ_U_SOFT)
+#define IE_UTIE		(_AC(0x1, UL) << IRQ_U_TIMER)
+#define IE_UEIE		(_AC(0x1, UL) << IRQ_U_EXT)
+
 #ifndef __ASSEMBLY__
 
 #define csr_swap(csr, val)					\
diff --git a/arch/riscv/include/asm/processor.h b/arch/riscv/include/asm/processor.h
index 3e23e1786d05..3ccf29f58221 100644
--- a/arch/riscv/include/asm/processor.h
+++ b/arch/riscv/include/asm/processor.h
@@ -82,6 +82,10 @@ struct thread_struct {
 	unsigned long bad_cause;
 	unsigned long vstate_ctrl;
 	struct __riscv_v_ext_state vstate;
+#ifdef CONFIG_RISCV_UINTR
+	unsigned long lq_idx;
+	bool is_uintr_enabled;
+#endif
 };
 
 /* Whitelist the fstate from the task_struct for hardened usercopy */
diff --git a/arch/riscv/include/asm/ptrace.h b/arch/riscv/include/asm/ptrace.h
index b5b0adcc85c1..2c4077758fbd 100644
--- a/arch/riscv/include/asm/ptrace.h
+++ b/arch/riscv/include/asm/ptrace.h
@@ -51,6 +51,14 @@ struct pt_regs {
 	unsigned long cause;
 	/* a0 value before the syscall */
 	unsigned long orig_a0;
+#ifdef CONFIG_RISCV_UINTR
+	/* User CSRs */
+	unsigned long uip;
+	unsigned long uie;
+	unsigned long utvec;
+	unsigned long uscratch;
+	unsigned long uepc;
+#endif
 };
 
 #define PTRACE_SYSEMU			0x1f
diff --git a/arch/riscv/include/asm/syscall.h b/arch/riscv/include/asm/syscall.h
index 121fff429dce..ea73db0e5cfe 100644
--- a/arch/riscv/include/asm/syscall.h
+++ b/arch/riscv/include/asm/syscall.h
@@ -99,4 +99,11 @@ asmlinkage long sys_riscv_flush_icache(uintptr_t, uintptr_t, uintptr_t);
 
 asmlinkage long sys_riscv_hwprobe(struct riscv_hwprobe *, size_t, size_t,
 				  unsigned long *, unsigned int);
+
+#ifdef CONFIG_RISCV_UINTR
+
+asmlinkage long sys_uintr_enable(void);
+
+#endif
+
 #endif	/* _ASM_RISCV_SYSCALL_H */
diff --git a/arch/riscv/include/uapi/asm/unistd.h b/arch/riscv/include/uapi/asm/unistd.h
index 950ab3fd4409..4c7fa7ec9cba 100644
--- a/arch/riscv/include/uapi/asm/unistd.h
+++ b/arch/riscv/include/uapi/asm/unistd.h
@@ -52,3 +52,14 @@ __SYSCALL(__NR_riscv_flush_icache, sys_riscv_flush_icache)
 #define __NR_riscv_hwprobe (__NR_arch_specific_syscall + 14)
 #endif
 __SYSCALL(__NR_riscv_hwprobe, sys_riscv_hwprobe)
+
+#ifdef CONFIG_RISCV_UINTR
+
+#ifndef __NR_riscv_uintr_enable
+#define __NR_riscv_uintr_enable (__NR_arch_specific_syscall + 0)
+#endif
+__SYSCALL(__NR_riscv_uintr_enable, sys_uintr_enable)
+
+
+
+#endif
\ No newline at end of file
diff --git a/arch/riscv/kernel/Makefile b/arch/riscv/kernel/Makefile
index 95cf25d48405..a295e1e6f007 100644
--- a/arch/riscv/kernel/Makefile
+++ b/arch/riscv/kernel/Makefile
@@ -101,3 +101,5 @@ obj-$(CONFIG_COMPAT)		+= compat_vdso/
 
 obj-$(CONFIG_64BIT)		+= pi/
 obj-$(CONFIG_ACPI)		+= acpi.o
+
+obj-$(CONFIG_RISCV_UINTR)	+= uintr.o
\ No newline at end of file
diff --git a/arch/riscv/kernel/asm-offsets.c b/arch/riscv/kernel/asm-offsets.c
index d6a75aac1d27..944474490f45 100644
--- a/arch/riscv/kernel/asm-offsets.c
+++ b/arch/riscv/kernel/asm-offsets.c
@@ -115,6 +115,14 @@ void asm_offsets(void)
 	OFFSET(PT_BADADDR, pt_regs, badaddr);
 	OFFSET(PT_CAUSE, pt_regs, cause);
 
+#ifdef CONFIG_RISCV_UINTR
+	OFFSET(PT_UIP, pt_regs, uip);
+	OFFSET(PT_UIE, pt_regs, uie);
+	OFFSET(PT_UTVEC, pt_regs, utvec);
+	OFFSET(PT_USCRATCH, pt_regs, uscratch);
+	OFFSET(PT_UEPC, pt_regs, uepc);
+#endif
+
 	OFFSET(SUSPEND_CONTEXT_REGS, suspend_context, regs);
 
 	OFFSET(HIBERN_PBE_ADDR, pbe, address);
diff --git a/arch/riscv/kernel/entry.S b/arch/riscv/kernel/entry.S
index 143a2bb3e697..3df88cfe29fe 100644
--- a/arch/riscv/kernel/entry.S
+++ b/arch/riscv/kernel/entry.S
@@ -66,6 +66,21 @@ _save_context:
 	REG_S s4, PT_CAUSE(sp)
 	REG_S s5, PT_TP(sp)
 
+#ifdef CONFIG_RISCV_UINTR
+	# Save uintr registers
+	csrr s6, CSR_UIP
+	csrr s7, CSR_UIE
+	csrr s8, CSR_UTVEC
+	csrr s9, CSR_USCRATCH
+	csrr s10, CSR_UEPC
+	REG_S s6, PT_UIP(sp)
+	REG_S s7, PT_UIE(sp)
+	REG_S s8, PT_UTVEC(sp)
+	REG_S s9, PT_USCRATCH(sp)
+	REG_S s10, PT_UEPC(sp)
+	
+#endif
+
 	/*
 	 * Set the scratch register to 0, so that if a recursive exception
 	 * occurs, the exception vector knows it came from the kernel
@@ -119,6 +134,10 @@ SYM_CODE_START_NOALIGN(ret_from_exception)
 #endif
 	bnez s0, 1f
 
+	// restore the user csrs
+	move a0, sp
+	call riscv_uintr_restore
+
 	/* Save unwound kernel stack pointer in thread_info */
 	addi s0, sp, PT_SIZE_ON_STACK
 	REG_S s0, TASK_TI_KERNEL_SP(tp)
diff --git a/drivers/irqchip/Kconfig b/drivers/irqchip/Kconfig
index 3f5a4a36c15d..a5d7012e0ab5 100644
--- a/drivers/irqchip/Kconfig
+++ b/drivers/irqchip/Kconfig
@@ -553,6 +553,16 @@ config SIFIVE_PLIC
 	select IRQ_DOMAIN_HIERARCHY
 	select GENERIC_IRQ_EFFECTIVE_AFF_MASK if SMP
 
+config RISCV_TAIC
+	bool "RISC-V Task Aware Interrupt Controller"
+	depends on RISCV
+	default y
+	help
+		This enables support for the TAIC. The TAIC connects U-mode
+		software interrupt pending bit and U-mode software interrupt 
+		pending bit of each HART.
+		If you don't know what to do here, say Y.
+
 config EXYNOS_IRQ_COMBINER
 	bool "Samsung Exynos IRQ combiner support" if COMPILE_TEST
 	depends on (ARCH_EXYNOS && ARM) || COMPILE_TEST
diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
index ffd945fe71aa..658553f7893b 100644
--- a/drivers/irqchip/Makefile
+++ b/drivers/irqchip/Makefile
@@ -96,6 +96,7 @@ obj-$(CONFIG_CSKY_MPINTC)		+= irq-csky-mpintc.o
 obj-$(CONFIG_CSKY_APB_INTC)		+= irq-csky-apb-intc.o
 obj-$(CONFIG_RISCV_INTC)		+= irq-riscv-intc.o
 obj-$(CONFIG_SIFIVE_PLIC)		+= irq-sifive-plic.o
+obj-$(CONFIG_RISCV_TAIC)		+= irq-riscv-taic.o
 obj-$(CONFIG_IMX_IRQSTEER)		+= irq-imx-irqsteer.o
 obj-$(CONFIG_IMX_INTMUX)		+= irq-imx-intmux.o
 obj-$(CONFIG_IMX_MU_MSI)		+= irq-imx-mu-msi.o
